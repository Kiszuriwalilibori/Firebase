{"version":3,"sources":["components/MessageBox.jsx"],"names":["MyAlert","withStyles","root","background","color","fontSize","border","boxShadow","Alert","MessageBox","props","open","close","message","autoHideDuration","onClose","severity","variant","connect","state","isMessage","dispatch","hideMessage"],"mappings":"uGAAA,2DAQA,MAAMA,EAAUC,YAAW,CACvBC,KAAM,CACFC,WAAY,UACZC,MAAO,UACPC,SAAU,UACVC,OAAQ,mBACRC,UACI,uMAPIN,CASbO,KAEH,IAAIC,EAAaC,IACb,MAAM,KAAEC,EAAF,MAAQC,EAAR,QAAeC,GAAYH,EAEjC,OACI,gBAAC,IAAD,CAAUC,KAAMA,EAAMG,iBAAkB,IAAMC,QAASH,GACnD,gBAACZ,EAAD,CAASgB,SAAS,UAAUC,QAAQ,UAC/BJ,KAejBJ,EAAaS,YALWC,IAAK,CACzBR,KAAMQ,EAAMC,UACZP,QAASM,EAAMN,UANQQ,IAAQ,CAC/BT,MAAO,IAAMS,EAASC,iBAQbJ,CAA6CT,GAE3CA","file":"static/js/15.9950593f.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux';\r\nimport { hideMessage } from '../js/REDUX/actions';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst MyAlert = withStyles({\r\n    root: {\r\n        background: '#1A4613',\r\n        color: '#F5F2AA',\r\n        fontSize: '1.25rem',\r\n        border: '1px solid 4d684d',\r\n        boxShadow:\r\n            'inset 0 0 5px #4d684d, 0 1px 2px rgba(0,0,0,0.07), 0 2px 4px rgba(0,0,0,0.07), 0 4px 8px rgba(0,0,0,0.07), 0 8px 16px rgba(0,0,0,0.07), 0 16px 32px rgba(0,0,0,0.07), 0 32px 64px rgba(0,0,0,0.07)',\r\n    },\r\n})(Alert);\r\n\r\nlet MessageBox = props => {\r\n    const { open, close, message } = props;\r\n\r\n    return (\r\n        <Snackbar open={open} autoHideDuration={6000} onClose={close}>\r\n            <MyAlert severity=\"success\" variant=\"filled\">\r\n                {message}\r\n            </MyAlert>\r\n        </Snackbar>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    close: () => dispatch(hideMessage()),\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n    open: state.isMessage,\r\n    message: state.message,\r\n});\r\n\r\nMessageBox = connect(mapStateToProps, mapDispatchToProps)(MessageBox);\r\n\r\nexport default MessageBox;\r\n\r\nMessageBox.propTypes = {\r\n    open: PropTypes.bool,\r\n    message: PropTypes.string,\r\n    close: PropTypes.func,\r\n};\r\n"],"sourceRoot":""}