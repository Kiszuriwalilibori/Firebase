{"version":3,"sources":["js/ROUTES/routes.js","contexts/firebaseContext.js","components/CustomContainer.jsx","js/FUNCTIONS/functions.js","components/EmptyLoader.jsx","js/REDUX/actions.js","components/LandingPage.jsx","js/REDUX/reducer.js","serviceWorker.js","serviceWorkerTest.js","components/Awaiting.jsx","index.js"],"names":["LANDING","LOGIN","HOME","CONNECT","ERROR","FirebaseContext","React","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Firebase","constructor","firebase","initializeApp","this","database","itemsRef","ref","connectedRef","provider","auth","GoogleAuthProvider","CustomContainer","withStyles","root","margin","display","flexDirection","height","justifyContent","alignItems","background","Box","sortFigures","table","is_descending","key","func","_","lowerCase","sort","a","b","EmptyLoader","GET_DATA_DONE","SORT","SHOW_ADD_USER_FORM","SUBMIT_USER","LOGOUT","SHOW_ERROR","HIDE_ERROR","SHOW_WARNING","HIDE_WARNING","SHOW_MESSAGE","HIDE_MESSAGE","HIDE_ADDED_USER_MESSAGE","TOGGLE_SPINNER","TOGGLE_SUBMIT","toggleSubmit","type","submitUser","data","payload","showAddUserForm","showError","hideError","showWarning","hideWarning","showMessage","hideMessage","toggleSpinner","getDataDone","login","logout","hideAddedUserMessage","LandingPage","to","ROUTES","style","textDecoration","Grow","in","className","initialState","isLoading","items","isError","errorMessage","message","columnSortBy","isSortDescending","isHiddenInputForm","isHiddenAddUserButton","isHiddenAddedUserMsg","isNotLimitReached","nonSortableColumns","Set","spinnerVisible","isAlert","limit","user","submitDisabled","reducer","state","action","actions","sorted_items","isMessage","toggled_submit","newSpinner","length","Boolean","window","location","hostname","match","isLocalhost","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","Awaiting","Component","props","fallback","App","lazy","Login","Error","Loader","store","createStore","applyMiddleware","thunk","ReactDOM","render","Provider","value","basename","exact","path","component","document","getElementById","URL","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerTest"],"mappings":"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","file":"static/js/main.2c09d77d.chunk.js","sourcesContent":["export const LANDING = '/';\r\nexport const LOGIN = '/login';\r\nexport const HOME = '/home';\r\nexport const CONNECT = '/connect';\r\nexport const ADMIN = '/admin';\r\nexport const ERROR = '/error';","import * as React from 'react';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\n\r\nexport const FirebaseContext = React.createContext();\r\n\r\nconst config = {\r\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n    authDomain: 'unamo-1dbf1.firebaseapp.com',\r\n    databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n    projectId: 'unamo-1dbf1',\r\n    storageBucket: 'unamo-1dbf1.appspot.com',\r\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n};\r\n\r\nexport default class Firebase {\r\n    constructor() {\r\n        firebase.initializeApp(config);\r\n        this.database = firebase.database();\r\n        this.itemsRef = this.database.ref('items');\r\n        this.connectedRef = this.database.ref('.info/connected');\r\n        this.provider = new firebase.auth.GoogleAuthProvider();\r\n        this.auth = firebase.auth();\r\n    }\r\n}\r\n","import Box from \"@material-ui/core/Box\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nexport const CustomContainer = withStyles({\r\n  root: {\r\n    margin: \"0 auto\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"100vh\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    background: \"transparent,\",\r\n  },\r\n})(Box);\r\n","import _ from \"lodash\";\n\nexport const limitStatus = (source, limit) => !(source.length >= limit);\n\nexport function checkDuplicates(source, pattern, column) {\n  const comparator = (item) =>\n    _.isEqual(_.nth(item, column), _.nth(pattern, column));\n  const result = source.filter(comparator);\n  return !(result.length > 0);\n}\n\nexport const sortFigures = (table, is_descending, key, func = _.lowerCase) => {\n  const comparator_descending = (a, b) => {\n    if (func(a[key]) > func(b[key])) {\n      return -1;\n    }\n    if (func(b[key]) > func(a[key])) {\n      return 1;\n    }\n    return 0;\n  };\n\n  const comparator_ascending = (a, b) => {\n    if (func(a[key]) > func(b[key])) {\n      return 1;\n    }\n    if (func(b[key]) > func(a[key])) {\n      return -1;\n    }\n    return 0;\n  };\n\n  return is_descending\n    ? [...table].sort(comparator_descending)\n    : [...table].sort(comparator_ascending);\n};\n","\r\nconst EmptyLoader = () => null;\r\nexport default EmptyLoader;","export const GET_DATA_DONE = \"GET_DATA_DONE\";\nexport const SORT = \"SORT\";\nexport const SHOW_ADD_USER_FORM = \"SHOW_ADD_USER_FORM\";\nexport const SUBMIT_USER = \"SUBMIT\";\nexport const LOGIN = \"LOGIN\";\nexport const LOGOUT = \"LOGOUT\";\nexport const SHOW_ERROR = \"SHOW_ERROR\";\nexport const HIDE_ERROR = \"HIDE_ERROR\";\nexport const SHOW_WARNING = \"SHOW_WARNING\";\nexport const HIDE_WARNING = \"HIDE_WARNING\";\nexport const SHOW_MESSAGE = \"SHOW_MESSAGE\";\nexport const HIDE_MESSAGE = \"HIDE_MESSAGE\";\nexport const HIDE_ADDED_USER_MESSAGE = \"HIDE_ADDED_USER_MESSAGE\";\nexport const TOGGLE_SPINNER = \"TOGGLE_SPINNER\";\nexport const BLOCK_SUBMIT = \"BLOCK_SUBMIT\";\nexport const TOGGLE_SUBMIT = \"TOGGLE_SUBMIT\";\n\nexport function toggleSubmit() {\n  return { type: TOGGLE_SUBMIT };\n}\n\nexport function blockSubmit() {\n  return { type: BLOCK_SUBMIT };\n}\n\nexport function submitUser(data) {\n  return { type: SUBMIT_USER, payload: data };\n}\n\nexport function showAddUserForm() {\n  return { type: SHOW_ADD_USER_FORM };\n}\n\nexport function sort(data) {\n  return {\n    type: SORT,\n    payload: data,\n  };\n}\n\nexport function showError(data) {\n  return {\n    type: SHOW_ERROR,\n    payload: data,\n  };\n}\n\nexport function hideError() {\n  return {\n    type: HIDE_ERROR,\n  };\n}\n\nexport function showWarning(data) {\n  return {\n    type: SHOW_WARNING,\n    payload: data,\n  };\n}\n\nexport function hideWarning() {\n  return {\n    type: HIDE_WARNING,\n  };\n}\n\nexport function showMessage(data) {\n  return {\n    type: SHOW_MESSAGE,\n    payload: data,\n  };\n}\n\nexport function hideMessage() {\n  return {\n    type: HIDE_MESSAGE,\n  };\n}\n\nexport function toggleSpinner() {\n  return {\n    type: TOGGLE_SPINNER,\n  };\n}\n\nexport function getDataDone(data) {\n  return {\n    type: GET_DATA_DONE,\n    payload: data,\n  };\n}\n\nexport function login(data) {\n  return {\n    type: LOGIN,\n    payload: data,\n  };\n}\n\nexport function logout() {\n  return {\n    type: LOGOUT,\n  };\n}\n\nexport function hideAddedUserMessage() {\n  return {\n    type: HIDE_ADDED_USER_MESSAGE,\n  };\n}\n","import * as React from \"react\";\r\nimport { CustomContainer } from \"./CustomContainer\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport * as ROUTES from \"../js/ROUTES/routes\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst LandingPage = React.memo(() => {\r\n  return (\r\n    <Link to={ROUTES.HOME} style={{ textDecoration: \"none\" }}>\r\n      <CustomContainer>\r\n        <Grow in={true}>\r\n          <div className=\"landing_message\">Witam w Firebase :)</div>\r\n        </Grow>\r\n      </CustomContainer>\r\n    </Link>\r\n  );\r\n});\r\nexport default LandingPage;\r\n","import * as actions from './actions';\r\nimport { sortFigures } from '../FUNCTIONS/functions';\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    items: [],\r\n    isError: false,\r\n    errorMessage: '',\r\n    message: null,\r\n    columnSortBy: null,\r\n    isSortDescending: false,\r\n    isHiddenInputForm: true,\r\n    isHiddenAddUserButton: false,\r\n    isHiddenAddedUserMsg: true,\r\n    isNotLimitReached: true,\r\n    nonSortableColumns: new Set([0]),\r\n    spinnerVisible: false,\r\n    isAlert: false,\r\n    limit: 15,\r\n    user: null,\r\n    submitDisabled: false,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actions.SUBMIT_USER:\r\n            return {\r\n                ...state,\r\n                isHiddenInputForm: true,\r\n                isHiddenAddUserButton: false,\r\n                isHiddenAddedUserMsg: false,\r\n            };\r\n\r\n        case actions.SHOW_ADD_USER_FORM:\r\n            return state.isHiddenInputForm\r\n                ? {\r\n                      ...state,\r\n                      isHiddenAddedUserMsg: true,\r\n                      isHiddenAddUserButton: true,\r\n                      isHiddenInputForm: false,\r\n                  }\r\n                : { ...state };\r\n\r\n        case actions.SORT:\r\n            const { isSortDescending, columnSortBy } = action.payload;\r\n            const sorted_items = sortFigures([...state.items], isSortDescending, columnSortBy);\r\n            return {\r\n                ...state,\r\n                items: sorted_items,\r\n                isHiddenAddedUserMsg: true,\r\n                isSortDescending,\r\n                columnSortBy,\r\n            };\r\n\r\n        case actions.SHOW_ERROR:\r\n            return {\r\n                ...state,\r\n                isError: true,\r\n                errorMessage: action.payload,\r\n            };\r\n        case actions.HIDE_ERROR:\r\n            return {\r\n                ...state,\r\n                isError: false,\r\n                errorMessage: null,\r\n            };\r\n        case actions.SHOW_WARNING:\r\n            return {\r\n                ...state,\r\n                isAlert: true,\r\n                errorMessage: action.payload,\r\n            };\r\n        case actions.HIDE_WARNING:\r\n            return {\r\n                ...state,\r\n                isAlert: false,\r\n                errorMessage: null,\r\n            };\r\n        case actions.SHOW_MESSAGE:\r\n            return {\r\n                ...state,\r\n                isMessage: true,\r\n                message: action.payload,\r\n            };\r\n        case actions.HIDE_MESSAGE:\r\n            return {\r\n                ...state,\r\n                isMessage: false,\r\n                message: null,\r\n            };\r\n        case actions.TOGGLE_SUBMIT:\r\n            const toggled_submit = !state.submitDisabled;\r\n            return {\r\n                ...state,\r\n                submitDisabled: toggled_submit,\r\n            };\r\n\r\n        case actions.TOGGLE_SPINNER:\r\n            const spinner = state.spinnerVisible;\r\n            const newSpinner = !spinner;\r\n            return {\r\n                ...state,\r\n                spinnerVisible: newSpinner,\r\n            };\r\n\r\n        case actions.GET_DATA_DONE:\r\n            const { limit } = state;\r\n\r\n            const isNotLimitReached = action.payload ? action.payload.length < limit : true;\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                items: action.payload,\r\n                isNotLimitReached: isNotLimitReached,\r\n            };\r\n\r\n        case actions.HIDE_ADDED_USER_MESSAGE:\r\n            return {\r\n                ...state,\r\n                isHiddenAddedUserMsg: true,\r\n            };\r\n\r\n        case actions.LOGIN:\r\n            return {\r\n                ...state,\r\n                user: action.payload,\r\n            };\r\n\r\n        case actions.LOGOUT:\r\n            return {\r\n                ...state,\r\n                user: null,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n                navigator.serviceWorker.register('offlineWorker.js');\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React, { Suspense } from \"react\";\r\nimport EmptyLoader from \"./EmptyLoader\";\r\n\r\nconst Awaiting = (Component) => {\r\n  return (props) => (\r\n    <Suspense fallback={EmptyLoader()}>\r\n      <Component {...props} />\r\n    </Suspense>\r\n  );\r\n};\r\nexport default Awaiting;\r\n","import React, { lazy } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/App.css';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { Provider } from 'react-redux';\r\nimport Firebase, { FirebaseContext } from './contexts/firebaseContext';\r\nimport LandingPage from './components/LandingPage';\r\nimport reducer from './js/REDUX/reducer';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as serviceWorkerTest from './serviceWorkerTest';\r\nimport * as ROUTES from './js/ROUTES/routes';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Awaiting from './components/Awaiting';\r\n\r\nconst App = lazy(() => import('./components/App'));\r\nconst Login = lazy(() => import('./components/Login'));\r\nconst Error = lazy(() => import('./components/Error'));\r\nconst Loader = lazy(() => import('./components/Loader'));\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n    <FirebaseContext.Provider value={new Firebase()}>\r\n        <Provider store={store}>\r\n            <Router basename={process.env.PUBLIC_URL}>\r\n                <Switch>\r\n                    <Route exact path={ROUTES.LANDING} component={LandingPage} />\r\n                    <Route exact path={ROUTES.HOME} component={Awaiting(App)} />\r\n                    <Route exact path={ROUTES.LOGIN} component={Awaiting(Login)} />\r\n                    <Route exact path={ROUTES.ERROR} component={Awaiting(Error)} />\r\n                    <Route exact path={ROUTES.CONNECT} component={Awaiting(Loader)} />\r\n                </Switch>\r\n            </Router>\r\n        </Provider>\r\n    </FirebaseContext.Provider>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// function noConnection() {\r\n//   const state = store.getState();\r\n//   if (state.isError) { window.alert('Błąd połączenia albo zasób sieciowy nie jest dostępny'); }\r\n// }\r\n// store.subscribe(noConnection);\r\n\r\n//serviceWorker.register();\r\n\r\nserviceWorkerTest.register();\r\n"],"sourceRoot":""}